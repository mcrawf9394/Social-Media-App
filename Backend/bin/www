#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socialmediabackend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server, { cors: {
  origin: ['http://localhost:5173'], 
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type']
}})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const jwt = require('jsonwebtoken')
const User = require('../models/user')
const Posts = require('../models/posts');
const Comments = require('../models/comments')
const cloudinary = require('cloudinary').v2
cloudinary.config({
  cloud_name: 'dcubikbtn',
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET
})
io.on('connection', socket => {
  socket.on('Join-Posts', () => {
    socket.join('Posts')
  })
  socket.on('Join-Post', (postId) => {
    socket.join(postId)
  })
  socket.on('Post', async (user, content, photo) => {
    try {
      const postUser = await User.findById(jwt.decode(user).id)
      if (photo) {
        
        const newPost = new Posts({
          user: postUser.username,
          userPhoto: postUser.profilePic,
          content:content,
          photo: photo,
          likes: 0,
          date: new Date()
        })
        await newPost.save()
      } else {
        const newPost = new Posts({
          user: postUser.username,
          userPhoto: postUser.profilePic,
          content:content,
          likes: [],
          date: new Date()
        })
        await newPost.save()
      }
      let allPosts = await Posts.find().sort({date: -1}).exec()
      socket.to('Posts').emit('Recieve-Posts', allPosts)
    } catch (err) {
      console.log(err)
    }
    socket.on('comment', async (user, content, postId) => {
      try {
        const commentUser = await User.findById(jwt.decode(user).id)
        const newComment = new Comments({
          userName: commentUser.username,
          content: content,
          post: postId,
          date: new Date()
        })
        await newComment.save()
        const allComments = await Comments.find({post: postId}).sort({date: -1})
        socket.to(postId).emit('Recieve-Comments', allComments)
      } catch {

      }
    })
  })
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
